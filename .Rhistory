result = matrix(c(MAE,MSE),1,2)
colnames(result) = c("MAE","MSE")
rownames(result) = c("Loss")
return(result)
}
MSEandMAE(TEST3,'linres')
plot(linmod2)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(dplyr)
library(ggmap)
library(ggplot2)
library(RColorBrewer)
library(tidyverse)
library(rstudioapi)
library(caret)
library(leaps)
library(modelr)
library(kableExtra)
library(readr)
library(ggmap)
data = read_csv("Listings.csv")
# airbnb = data %>%
#   filter(city=="New York")  %>%
#   mutate("NumberOfDaysHosting"= as.numeric(Sys.Date() - host_since),
#         "star" = ifelse(review_scores_rating %in% 21:40, 2,
#                 ifelse(review_scores_rating %in% 41:60, 3,
#                 ifelse(review_scores_rating %in% 59:80, 4,
#                 ifelse(review_scores_rating %in% 81:100, 5, 1)))),
#         "NumberOfAmenities" = (str_count(amenities, ',') + 1),
#         "pricePerNight"= price/minimum_nights) %>%
#
#   select("listing_id", "host_since", "NumberOfDaysHosting", "host_response_time", "host_response_rate", "host_acceptance_rate", "host_is_superhost", "host_total_listings_count", "host_identity_verified", "district","latitude","longitude", "property_type",  "room_type","accommodates", "price", "minimum_nights", "maximum_nights", "review_scores_rating", "NumberOfAmenities", "pricePerNight", "review_scores_cleanliness", "host_has_profile_pic", "bedrooms", "review_scores_accuracy", "review_scores_checkin", "review_scores_communication", "review_scores_location", "review_scores_communication", "review_scores_location", "review_scores_value", "instant_bookable")
airbnb = data %>%
mutate("NumberOfDaysHosting"= as.numeric(difftime(Sys.Date(), format(as.Date(data$host_since, format = "%m/%d/%Y"), format = "%Y-%m-%d"))),
"star" = ifelse(review_scores_rating %in% 21:40, 2,
ifelse(review_scores_rating %in% 41:60, 3,
ifelse(review_scores_rating %in% 59:80, 4,
ifelse(review_scores_rating %in% 81:100, 5, 1)))),
"NumberOfAmenities" = (str_count(amenities, ',') + 1),
"pricePerNight"= price/minimum_nights) %>%
select("listing_id", "host_since", "NumberOfDaysHosting", "host_response_time", "host_response_rate", "host_acceptance_rate", "host_is_superhost", "host_total_listings_count", "host_identity_verified", "district","city","latitude","longitude", "property_type",  "room_type","accommodates", "price", "minimum_nights", "maximum_nights", "review_scores_rating", "NumberOfAmenities", "pricePerNight", "review_scores_cleanliness", "host_has_profile_pic", "bedrooms", "review_scores_accuracy", "review_scores_checkin", "review_scores_communication", "review_scores_location", "star", "review_scores_communication", "review_scores_location", "review_scores_value", "instant_bookable") %>%
filter(city=="New York")
airbnb2 = na.omit(airbnb) %>%
select("listing_id", "host_since", "NumberOfDaysHosting", "host_response_time", "host_response_rate", "host_acceptance_rate", "host_is_superhost", "host_total_listings_count", "host_identity_verified", "district","city","latitude","longitude", "property_type",  "room_type","accommodates", "price", "minimum_nights", "maximum_nights", "review_scores_rating", "NumberOfAmenities", "pricePerNight", "review_scores_cleanliness", "host_has_profile_pic", "bedrooms", "star", "review_scores_accuracy", "review_scores_checkin", "review_scores_communication", "review_scores_location", "review_scores_communication", "review_scores_location", "review_scores_value", "instant_bookable")
airbnb_man = airbnb %>%
filter(district =="Manhattan")
airbnb_brook = airbnb %>%
filter(district=="Brooklyn")
airbnb_queens = airbnb %>%
filter(district =="Queens")
airbnb_bronx = airbnb %>%
filter(district =="Bronx")
airbnb_stat = airbnb %>%
filter(district=="Staten Island")
options(digits=4)
plot(linmod5)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(dplyr)
library(ggmap)
library(ggplot2)
library(RColorBrewer)
library(tidyverse)
library(rstudioapi)
library(caret)
library(leaps)
library(modelr)
library(kableExtra)
library(readr)
library(ggmap)
data = read_csv("Listings.csv")
# airbnb = data %>%
#   filter(city=="New York")  %>%
#   mutate("NumberOfDaysHosting"= as.numeric(Sys.Date() - host_since),
#         "star" = ifelse(review_scores_rating %in% 21:40, 2,
#                 ifelse(review_scores_rating %in% 41:60, 3,
#                 ifelse(review_scores_rating %in% 59:80, 4,
#                 ifelse(review_scores_rating %in% 81:100, 5, 1)))),
#         "NumberOfAmenities" = (str_count(amenities, ',') + 1),
#         "pricePerNight"= price/minimum_nights) %>%
#
#   select("listing_id", "host_since", "NumberOfDaysHosting", "host_response_time", "host_response_rate", "host_acceptance_rate", "host_is_superhost", "host_total_listings_count", "host_identity_verified", "district","latitude","longitude", "property_type",  "room_type","accommodates", "price", "minimum_nights", "maximum_nights", "review_scores_rating", "NumberOfAmenities", "pricePerNight", "review_scores_cleanliness", "host_has_profile_pic", "bedrooms", "review_scores_accuracy", "review_scores_checkin", "review_scores_communication", "review_scores_location", "review_scores_communication", "review_scores_location", "review_scores_value", "instant_bookable")
airbnb = data %>%
mutate("NumberOfDaysHosting"= as.numeric(difftime(Sys.Date(), format(as.Date(data$host_since, format = "%m/%d/%Y"), format = "%Y-%m-%d"))),
"star" = ifelse(review_scores_rating %in% 21:40, 2,
ifelse(review_scores_rating %in% 41:60, 3,
ifelse(review_scores_rating %in% 59:80, 4,
ifelse(review_scores_rating %in% 81:100, 5, 1)))),
"NumberOfAmenities" = (str_count(amenities, ',') + 1),
"pricePerNight"= price/minimum_nights) %>%
select("listing_id", "host_since", "NumberOfDaysHosting", "host_response_time", "host_response_rate", "host_acceptance_rate", "host_is_superhost", "host_total_listings_count", "host_identity_verified", "district","city","latitude","longitude", "property_type",  "room_type","accommodates", "price", "minimum_nights", "maximum_nights", "review_scores_rating", "NumberOfAmenities", "pricePerNight", "review_scores_cleanliness", "host_has_profile_pic", "bedrooms", "review_scores_accuracy", "review_scores_checkin", "review_scores_communication", "review_scores_location", "star", "review_scores_communication", "review_scores_location", "review_scores_value", "instant_bookable") %>%
filter(city=="New York")
airbnb2 = na.omit(airbnb) %>%
select("listing_id", "host_since", "NumberOfDaysHosting", "host_response_time", "host_response_rate", "host_acceptance_rate", "host_is_superhost", "host_total_listings_count", "host_identity_verified", "district","city","latitude","longitude", "property_type",  "room_type","accommodates", "price", "minimum_nights", "maximum_nights", "review_scores_rating", "NumberOfAmenities", "pricePerNight", "review_scores_cleanliness", "host_has_profile_pic", "bedrooms", "star", "review_scores_accuracy", "review_scores_checkin", "review_scores_communication", "review_scores_location", "review_scores_communication", "review_scores_location", "review_scores_value", "instant_bookable")
airbnb_man = airbnb %>%
filter(district =="Manhattan")
airbnb_brook = airbnb %>%
filter(district=="Brooklyn")
airbnb_queens = airbnb %>%
filter(district =="Queens")
airbnb_bronx = airbnb %>%
filter(district =="Bronx")
airbnb_stat = airbnb %>%
filter(district=="Staten Island")
options(digits=4)
# Final model from stepwise regression
linmod5 = lm(formula = star ~ factor(host_is_superhost) + host_total_listings_count +
factor(host_identity_verified) + accommodates + bedrooms +
NumberOfAmenities + price + maximum_nights + review_scores_accuracy +
review_scores_cleanliness + review_scores_checkin + review_scores_communication +
review_scores_value + factor(instant_bookable), data = train)
summary(linmod5)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(dplyr)
library(ggmap)
library(ggplot2)
library(RColorBrewer)
library(tidyverse)
library(rstudioapi)
library(caret)
library(leaps)
library(modelr)
library(kableExtra)
library(readr)
library(ggmap)
data = read_csv("Listings.csv")
# airbnb = data %>%
#   filter(city=="New York")  %>%
#   mutate("NumberOfDaysHosting"= as.numeric(Sys.Date() - host_since),
#         "star" = ifelse(review_scores_rating %in% 21:40, 2,
#                 ifelse(review_scores_rating %in% 41:60, 3,
#                 ifelse(review_scores_rating %in% 59:80, 4,
#                 ifelse(review_scores_rating %in% 81:100, 5, 1)))),
#         "NumberOfAmenities" = (str_count(amenities, ',') + 1),
#         "pricePerNight"= price/minimum_nights) %>%
#
#   select("listing_id", "host_since", "NumberOfDaysHosting", "host_response_time", "host_response_rate", "host_acceptance_rate", "host_is_superhost", "host_total_listings_count", "host_identity_verified", "district","latitude","longitude", "property_type",  "room_type","accommodates", "price", "minimum_nights", "maximum_nights", "review_scores_rating", "NumberOfAmenities", "pricePerNight", "review_scores_cleanliness", "host_has_profile_pic", "bedrooms", "review_scores_accuracy", "review_scores_checkin", "review_scores_communication", "review_scores_location", "review_scores_communication", "review_scores_location", "review_scores_value", "instant_bookable")
airbnb = data %>%
mutate("NumberOfDaysHosting"= as.numeric(difftime(Sys.Date(), format(as.Date(data$host_since, format = "%m/%d/%Y"), format = "%Y-%m-%d"))),
"star" = ifelse(review_scores_rating %in% 21:40, 2,
ifelse(review_scores_rating %in% 41:60, 3,
ifelse(review_scores_rating %in% 59:80, 4,
ifelse(review_scores_rating %in% 81:100, 5, 1)))),
"NumberOfAmenities" = (str_count(amenities, ',') + 1),
"pricePerNight"= price/minimum_nights) %>%
select("listing_id", "host_since", "NumberOfDaysHosting", "host_response_time", "host_response_rate", "host_acceptance_rate", "host_is_superhost", "host_total_listings_count", "host_identity_verified", "district","city","latitude","longitude", "property_type",  "room_type","accommodates", "price", "minimum_nights", "maximum_nights", "review_scores_rating", "NumberOfAmenities", "pricePerNight", "review_scores_cleanliness", "host_has_profile_pic", "bedrooms", "review_scores_accuracy", "review_scores_checkin", "review_scores_communication", "review_scores_location", "star", "review_scores_communication", "review_scores_location", "review_scores_value", "instant_bookable") %>%
filter(city=="New York")
airbnb2 = na.omit(airbnb) %>%
select("listing_id", "host_since", "NumberOfDaysHosting", "host_response_time", "host_response_rate", "host_acceptance_rate", "host_is_superhost", "host_total_listings_count", "host_identity_verified", "district","city","latitude","longitude", "property_type",  "room_type","accommodates", "price", "minimum_nights", "maximum_nights", "review_scores_rating", "NumberOfAmenities", "pricePerNight", "review_scores_cleanliness", "host_has_profile_pic", "bedrooms", "star", "review_scores_accuracy", "review_scores_checkin", "review_scores_communication", "review_scores_location", "review_scores_communication", "review_scores_location", "review_scores_value", "instant_bookable")
airbnb_man = airbnb %>%
filter(district =="Manhattan")
airbnb_brook = airbnb %>%
filter(district=="Brooklyn")
airbnb_queens = airbnb %>%
filter(district =="Queens")
airbnb_bronx = airbnb %>%
filter(district =="Bronx")
airbnb_stat = airbnb %>%
filter(district=="Staten Island")
options(digits=4)
train
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(dplyr)
library(ggmap)
library(ggplot2)
library(RColorBrewer)
library(tidyverse)
library(rstudioapi)
library(caret)
library(leaps)
library(modelr)
library(kableExtra)
library(readr)
library(ggmap)
data = read_csv("Listings.csv")
# airbnb = data %>%
#   filter(city=="New York")  %>%
#   mutate("NumberOfDaysHosting"= as.numeric(Sys.Date() - host_since),
#         "star" = ifelse(review_scores_rating %in% 21:40, 2,
#                 ifelse(review_scores_rating %in% 41:60, 3,
#                 ifelse(review_scores_rating %in% 59:80, 4,
#                 ifelse(review_scores_rating %in% 81:100, 5, 1)))),
#         "NumberOfAmenities" = (str_count(amenities, ',') + 1),
#         "pricePerNight"= price/minimum_nights) %>%
#
#   select("listing_id", "host_since", "NumberOfDaysHosting", "host_response_time", "host_response_rate", "host_acceptance_rate", "host_is_superhost", "host_total_listings_count", "host_identity_verified", "district","latitude","longitude", "property_type",  "room_type","accommodates", "price", "minimum_nights", "maximum_nights", "review_scores_rating", "NumberOfAmenities", "pricePerNight", "review_scores_cleanliness", "host_has_profile_pic", "bedrooms", "review_scores_accuracy", "review_scores_checkin", "review_scores_communication", "review_scores_location", "review_scores_communication", "review_scores_location", "review_scores_value", "instant_bookable")
airbnb = data %>%
mutate("NumberOfDaysHosting"= as.numeric(difftime(Sys.Date(), format(as.Date(data$host_since, format = "%m/%d/%Y"), format = "%Y-%m-%d"))),
"star" = ifelse(review_scores_rating %in% 21:40, 2,
ifelse(review_scores_rating %in% 41:60, 3,
ifelse(review_scores_rating %in% 59:80, 4,
ifelse(review_scores_rating %in% 81:100, 5, 1)))),
"NumberOfAmenities" = (str_count(amenities, ',') + 1),
"pricePerNight"= price/minimum_nights) %>%
select("listing_id", "host_since", "NumberOfDaysHosting", "host_response_time", "host_response_rate", "host_acceptance_rate", "host_is_superhost", "host_total_listings_count", "host_identity_verified", "district","city","latitude","longitude", "property_type",  "room_type","accommodates", "price", "minimum_nights", "maximum_nights", "review_scores_rating", "NumberOfAmenities", "pricePerNight", "review_scores_cleanliness", "host_has_profile_pic", "bedrooms", "review_scores_accuracy", "review_scores_checkin", "review_scores_communication", "review_scores_location", "star", "review_scores_communication", "review_scores_location", "review_scores_value", "instant_bookable") %>%
filter(city=="New York")
airbnb2 = na.omit(airbnb) %>%
select("listing_id", "host_since", "NumberOfDaysHosting", "host_response_time", "host_response_rate", "host_acceptance_rate", "host_is_superhost", "host_total_listings_count", "host_identity_verified", "district","city","latitude","longitude", "property_type",  "room_type","accommodates", "price", "minimum_nights", "maximum_nights", "review_scores_rating", "NumberOfAmenities", "pricePerNight", "review_scores_cleanliness", "host_has_profile_pic", "bedrooms", "star", "review_scores_accuracy", "review_scores_checkin", "review_scores_communication", "review_scores_location", "review_scores_communication", "review_scores_location", "review_scores_value", "instant_bookable")
airbnb_man = airbnb %>%
filter(district =="Manhattan")
airbnb_brook = airbnb %>%
filter(district=="Brooklyn")
airbnb_queens = airbnb %>%
filter(district =="Queens")
airbnb_bronx = airbnb %>%
filter(district =="Bronx")
airbnb_stat = airbnb %>%
filter(district=="Staten Island")
options(digits=4)
set.seed(124)
train_ind = sample(nrow(airbnb2), size = 0.8 * nrow(airbnb2))
train = airbnb2[train_ind, ]$district = "Brooklyn"
test = airbnb2[-train_ind, ]$district = 'Brooklyn
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(dplyr)
library(ggmap)
library(ggplot2)
library(RColorBrewer)
library(tidyverse)
library(rstudioapi)
library(caret)
library(leaps)
library(modelr)
library(kableExtra)
library(readr)
library(ggmap)
data = read_csv("Listings.csv")
# airbnb = data %>%
#   filter(city=="New York")  %>%
#   mutate("NumberOfDaysHosting"= as.numeric(Sys.Date() - host_since),
#         "star" = ifelse(review_scores_rating %in% 21:40, 2,
#                 ifelse(review_scores_rating %in% 41:60, 3,
#                 ifelse(review_scores_rating %in% 59:80, 4,
#                 ifelse(review_scores_rating %in% 81:100, 5, 1)))),
#         "NumberOfAmenities" = (str_count(amenities, ',') + 1),
#         "pricePerNight"= price/minimum_nights) %>%
#
#   select("listing_id", "host_since", "NumberOfDaysHosting", "host_response_time", "host_response_rate", "host_acceptance_rate", "host_is_superhost", "host_total_listings_count", "host_identity_verified", "district","latitude","longitude", "property_type",  "room_type","accommodates", "price", "minimum_nights", "maximum_nights", "review_scores_rating", "NumberOfAmenities", "pricePerNight", "review_scores_cleanliness", "host_has_profile_pic", "bedrooms", "review_scores_accuracy", "review_scores_checkin", "review_scores_communication", "review_scores_location", "review_scores_communication", "review_scores_location", "review_scores_value", "instant_bookable")
airbnb = data %>%
mutate("NumberOfDaysHosting"= as.numeric(difftime(Sys.Date(), format(as.Date(data$host_since, format = "%m/%d/%Y"), format = "%Y-%m-%d"))),
"star" = ifelse(review_scores_rating %in% 21:40, 2,
ifelse(review_scores_rating %in% 41:60, 3,
ifelse(review_scores_rating %in% 59:80, 4,
ifelse(review_scores_rating %in% 81:100, 5, 1)))),
"NumberOfAmenities" = (str_count(amenities, ',') + 1),
"pricePerNight"= price/minimum_nights) %>%
select("listing_id", "host_since", "NumberOfDaysHosting", "host_response_time", "host_response_rate", "host_acceptance_rate", "host_is_superhost", "host_total_listings_count", "host_identity_verified", "district","city","latitude","longitude", "property_type",  "room_type","accommodates", "price", "minimum_nights", "maximum_nights", "review_scores_rating", "NumberOfAmenities", "pricePerNight", "review_scores_cleanliness", "host_has_profile_pic", "bedrooms", "review_scores_accuracy", "review_scores_checkin", "review_scores_communication", "review_scores_location", "star", "review_scores_communication", "review_scores_location", "review_scores_value", "instant_bookable") %>%
filter(city=="New York")
airbnb2 = na.omit(airbnb) %>%
select("listing_id", "host_since", "NumberOfDaysHosting", "host_response_time", "host_response_rate", "host_acceptance_rate", "host_is_superhost", "host_total_listings_count", "host_identity_verified", "district","city","latitude","longitude", "property_type",  "room_type","accommodates", "price", "minimum_nights", "maximum_nights", "review_scores_rating", "NumberOfAmenities", "pricePerNight", "review_scores_cleanliness", "host_has_profile_pic", "bedrooms", "star", "review_scores_accuracy", "review_scores_checkin", "review_scores_communication", "review_scores_location", "review_scores_communication", "review_scores_location", "review_scores_value", "instant_bookable")
airbnb_man = airbnb %>%
filter(district =="Manhattan")
airbnb_brook = airbnb %>%
filter(district=="Brooklyn")
airbnb_queens = airbnb %>%
filter(district =="Queens")
airbnb_bronx = airbnb %>%
filter(district =="Bronx")
airbnb_stat = airbnb %>%
filter(district=="Staten Island")
options(digits=4)
train = airbnb2[train_ind, ]$district %>% filter(district = "Brooklyn")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(dplyr)
library(ggmap)
library(ggplot2)
library(RColorBrewer)
library(tidyverse)
library(rstudioapi)
library(caret)
library(leaps)
library(modelr)
library(kableExtra)
library(readr)
library(ggmap)
data = read_csv("Listings.csv")
# airbnb = data %>%
#   filter(city=="New York")  %>%
#   mutate("NumberOfDaysHosting"= as.numeric(Sys.Date() - host_since),
#         "star" = ifelse(review_scores_rating %in% 21:40, 2,
#                 ifelse(review_scores_rating %in% 41:60, 3,
#                 ifelse(review_scores_rating %in% 59:80, 4,
#                 ifelse(review_scores_rating %in% 81:100, 5, 1)))),
#         "NumberOfAmenities" = (str_count(amenities, ',') + 1),
#         "pricePerNight"= price/minimum_nights) %>%
#
#   select("listing_id", "host_since", "NumberOfDaysHosting", "host_response_time", "host_response_rate", "host_acceptance_rate", "host_is_superhost", "host_total_listings_count", "host_identity_verified", "district","latitude","longitude", "property_type",  "room_type","accommodates", "price", "minimum_nights", "maximum_nights", "review_scores_rating", "NumberOfAmenities", "pricePerNight", "review_scores_cleanliness", "host_has_profile_pic", "bedrooms", "review_scores_accuracy", "review_scores_checkin", "review_scores_communication", "review_scores_location", "review_scores_communication", "review_scores_location", "review_scores_value", "instant_bookable")
airbnb = data %>%
mutate("NumberOfDaysHosting"= as.numeric(difftime(Sys.Date(), format(as.Date(data$host_since, format = "%m/%d/%Y"), format = "%Y-%m-%d"))),
"star" = ifelse(review_scores_rating %in% 21:40, 2,
ifelse(review_scores_rating %in% 41:60, 3,
ifelse(review_scores_rating %in% 59:80, 4,
ifelse(review_scores_rating %in% 81:100, 5, 1)))),
"NumberOfAmenities" = (str_count(amenities, ',') + 1),
"pricePerNight"= price/minimum_nights) %>%
select("listing_id", "host_since", "NumberOfDaysHosting", "host_response_time", "host_response_rate", "host_acceptance_rate", "host_is_superhost", "host_total_listings_count", "host_identity_verified", "district","city","latitude","longitude", "property_type",  "room_type","accommodates", "price", "minimum_nights", "maximum_nights", "review_scores_rating", "NumberOfAmenities", "pricePerNight", "review_scores_cleanliness", "host_has_profile_pic", "bedrooms", "review_scores_accuracy", "review_scores_checkin", "review_scores_communication", "review_scores_location", "star", "review_scores_communication", "review_scores_location", "review_scores_value", "instant_bookable") %>%
filter(city=="New York")
airbnb2 = na.omit(airbnb) %>%
select("listing_id", "host_since", "NumberOfDaysHosting", "host_response_time", "host_response_rate", "host_acceptance_rate", "host_is_superhost", "host_total_listings_count", "host_identity_verified", "district","city","latitude","longitude", "property_type",  "room_type","accommodates", "price", "minimum_nights", "maximum_nights", "review_scores_rating", "NumberOfAmenities", "pricePerNight", "review_scores_cleanliness", "host_has_profile_pic", "bedrooms", "star", "review_scores_accuracy", "review_scores_checkin", "review_scores_communication", "review_scores_location", "review_scores_communication", "review_scores_location", "review_scores_value", "instant_bookable")
airbnb_man = airbnb %>%
filter(district =="Manhattan")
airbnb_brook = airbnb %>%
filter(district=="Brooklyn")
airbnb_queens = airbnb %>%
filter(district =="Queens")
airbnb_bronx = airbnb %>%
filter(district =="Bronx")
airbnb_stat = airbnb %>%
filter(district=="Staten Island")
options(digits=4)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(dplyr)
library(ggmap)
library(ggplot2)
library(RColorBrewer)
library(tidyverse)
library(rstudioapi)
library(caret)
library(leaps)
library(modelr)
library(kableExtra)
library(readr)
library(ggmap)
data = read_csv("Listings.csv")
# airbnb = data %>%
#   filter(city=="New York")  %>%
#   mutate("NumberOfDaysHosting"= as.numeric(Sys.Date() - host_since),
#         "star" = ifelse(review_scores_rating %in% 21:40, 2,
#                 ifelse(review_scores_rating %in% 41:60, 3,
#                 ifelse(review_scores_rating %in% 59:80, 4,
#                 ifelse(review_scores_rating %in% 81:100, 5, 1)))),
#         "NumberOfAmenities" = (str_count(amenities, ',') + 1),
#         "pricePerNight"= price/minimum_nights) %>%
#
#   select("listing_id", "host_since", "NumberOfDaysHosting", "host_response_time", "host_response_rate", "host_acceptance_rate", "host_is_superhost", "host_total_listings_count", "host_identity_verified", "district","latitude","longitude", "property_type",  "room_type","accommodates", "price", "minimum_nights", "maximum_nights", "review_scores_rating", "NumberOfAmenities", "pricePerNight", "review_scores_cleanliness", "host_has_profile_pic", "bedrooms", "review_scores_accuracy", "review_scores_checkin", "review_scores_communication", "review_scores_location", "review_scores_communication", "review_scores_location", "review_scores_value", "instant_bookable")
airbnb = data %>%
mutate("NumberOfDaysHosting"= as.numeric(difftime(Sys.Date(), format(as.Date(data$host_since, format = "%m/%d/%Y"), format = "%Y-%m-%d"))),
"star" = ifelse(review_scores_rating %in% 21:40, 2,
ifelse(review_scores_rating %in% 41:60, 3,
ifelse(review_scores_rating %in% 59:80, 4,
ifelse(review_scores_rating %in% 81:100, 5, 1)))),
"NumberOfAmenities" = (str_count(amenities, ',') + 1),
"pricePerNight"= price/minimum_nights) %>%
select("listing_id", "host_since", "NumberOfDaysHosting", "host_response_time", "host_response_rate", "host_acceptance_rate", "host_is_superhost", "host_total_listings_count", "host_identity_verified", "district","city","latitude","longitude", "property_type",  "room_type","accommodates", "price", "minimum_nights", "maximum_nights", "review_scores_rating", "NumberOfAmenities", "pricePerNight", "review_scores_cleanliness", "host_has_profile_pic", "bedrooms", "review_scores_accuracy", "review_scores_checkin", "review_scores_communication", "review_scores_location", "star", "review_scores_communication", "review_scores_location", "review_scores_value", "instant_bookable") %>%
filter(city=="New York")
airbnb2 = na.omit(airbnb) %>%
select("listing_id", "host_since", "NumberOfDaysHosting", "host_response_time", "host_response_rate", "host_acceptance_rate", "host_is_superhost", "host_total_listings_count", "host_identity_verified", "district","city","latitude","longitude", "property_type",  "room_type","accommodates", "price", "minimum_nights", "maximum_nights", "review_scores_rating", "NumberOfAmenities", "pricePerNight", "review_scores_cleanliness", "host_has_profile_pic", "bedrooms", "star", "review_scores_accuracy", "review_scores_checkin", "review_scores_communication", "review_scores_location", "review_scores_communication", "review_scores_location", "review_scores_value", "instant_bookable")
airbnb_man = airbnb %>%
filter(district =="Manhattan")
airbnb_brook = airbnb %>%
filter(district=="Brooklyn")
airbnb_queens = airbnb %>%
filter(district =="Queens")
airbnb_bronx = airbnb %>%
filter(district =="Bronx")
airbnb_stat = airbnb %>%
filter(district=="Staten Island")
options(digits=4)
airbnb_table <- airbnb2 %>%
slice(1:6)
airbnb_table1 <- airbnb_table %>%
kbl()  %>%
kable_styling("striped",font_size = 12) %>%
scroll_box(width = "900px")
airbnb_table1
unclass(as.Date("1971-01-01"))
x <- c(-2,-1,0)
as.logical(x)
x <- c(12L,6L,10L)
statement > median(x)
x<-as.Date('2018-10-01')
months(x)
month(x)
a <- list('10', TRUE, 5.6)
is.character(a[1])
is.list(a[1])
a <- c(3,0,TRUE)
b <-c(4,0,FALSE)
c<-(a|B0)
c<-(a|B)
c<-(a|b)
v1 <- c(1,2,3)
v2 <- data.frame(c( 4,5,6))
vbound <- cbind(v1,v2)
setwd("~/Bootcamp_Work/Module/MechaCar_Statistical_Analysis")
library(dplyr)
# Read in csv file
car = read.csv("MechaCar_mpg")
# Loading in dplyr package
library(dplyr)
# Read in csv file
car = read.csv("MechaCar_mpg")
# Read in csv file
car = read.csv("MechaCar_mpg.csv")
View(car)
# Step 5. Creating linear regression model
model <- lm(mpg~*,data = car)
# Step 5. Creating linear regression model
model <- lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data = car)
summary(model)
# Step 6. Using the summary() function, determine the p-value and the r-squared value for the linear regression model.
summary(model)
# Import and read in the Suspension_Coil.csv file as a table
suspension <- read.csv("Suspension_Coil.csv")
View(suspension)
#
total_summary <- suspension %>% summarize(mean = mean(suspension$PSI), median = median(suspension$PSI), variance = var(suspension$PSI), std_dev = std(suspension$PSI))
#
total_summary <- suspension %>% summarize(mean = mean(suspension$PSI), median = median(suspension$PSI), variance = var(suspension$PSI), std_dev = sd(suspension$PSI))
View(total_summary)
# Import and read in the Suspension_Coil.csv file as a table
suspension <- read.csv("Suspension_Coil.csv")
#
total_summary <- summarize(mean = mean(suspension$PSI), median = median(suspension$PSI), variance = var(suspension$PSI), std_dev = sd(suspension$PSI))
#
total_summary <- summarize(mean = mean(suspension$PSI), median = median(suspension$PSI), variance = var(suspension$PSI), std_dev = sd(suspension$PSI))
#
total_summary <- suspension %>% summarize(mean = mean(suspension$PSI), median = median(suspension$PSI), variance = var(suspension$PSI), std_dev = sd(suspension$PSI))
View(total_summary)
# Write an RScript that creates a total_summary dataframe using the summarize() function to get the mean, median, variance, and standard deviation of the suspension coil’s PSI column
total_summary <- suspension %>% summarize(Mean = mean(suspension$PSI), Median = median(suspension$PSI), Variance = var(suspension$PSI), SD = sd(suspension$PSI))
View(total_summary)
# Write an RScript that creates a lot_summary dataframe using the group_by() and the summarize() functions to group each manufacturing lot by the mean, median, variance, and standard deviation of the suspension coil’s PSI column.
lot_summary <- suspension %>% group_by(suspension$Manufacturing_Lot) %>% summarize(Mean = mean(suspension$PSI), Median = median(suspension$PSI), Variance = var(suspension$PSI)
# Write an RScript that creates a lot_summary dataframe using the group_by() and the summarize() functions to group each manufacturing lot by the mean, median, variance, and standard deviation of the suspension coil’s PSI column.
lot_summary <- suspension %>% group_by(suspension$Manufacturing_Lot) %>% summarize(Mean = mean(suspension$PSI), Median = median(suspension$PSI), Variance = var(suspension$PSI)
# Write an RScript that creates a lot_summary dataframe using the group_by() and the summarize() functions to group each manufacturing lot by the mean, median, variance, and standard deviation of the suspension coil’s PSI column.
lot_summary <- suspension %>% group_by(suspension$Manufacturing_Lot) %>% summarize(Mean = mean(suspension$PSI), Median = median(suspension$PSI), Variance = var(suspension$PSI))
View(lot_summary)
# Write an RScript that creates a lot_summary dataframe using the group_by() and the summarize() functions to group each manufacturing lot by the mean, median, variance, and standard deviation of the suspension coil’s PSI column.
lot_summary <- suspension %>% group_by(suspension$Manufacturing_Lot) %>% summarize(Mean = mean(suspension$PSI), Median = median(suspension$PSI), Variance = var(suspension$PSI), SD = sd(suspension$PSI)))
View(lot_summary)
# Write an RScript that creates a lot_summary dataframe using the group_by() and the summarize() functions to group each manufacturing lot by the mean, median, variance, and standard deviation of the suspension coil’s PSI column.
lot_summary <- suspension %>% group_by(suspension$Manufacturing_Lot) %>% summarize(Mean = mean(suspension$PSI), Median = median(suspension$PSI), Variance = var(suspension$PSI), SD = sd(suspension$PSI))
# Write an RScript that creates a lot_summary dataframe using the group_by() and the summarize() functions to group each manufacturing lot by the mean, median, variance, and standard deviation of the suspension coil’s PSI column.
lot_summary <- suspension %>% group_by(suspension$Manufacturing_Lot) %>% summarize(Mean = mean(), Median = median(suspension$PSI), Variance = var(suspension$PSI), SD = sd(suspension$PSI))
# Write an RScript that creates a lot_summary dataframe using the group_by() and the summarize() functions to group each manufacturing lot by the mean, median, variance, and standard deviation of the suspension coil’s PSI column.
lot_summary <- suspension %>% group_by(suspension$Manufacturing_Lot) %>% summarize(Mean = mean(), Median = median(suspension$PSI), Variance = var(suspension$PSI), SD = sd(suspension$PSI))
# Write an RScript that creates a lot_summary dataframe using the group_by() and the summarize() functions to group each manufacturing lot by the mean, median, variance, and standard deviation of the suspension coil’s PSI column.
lot_summary <- suspension %>% group_by(suspension$Manufacturing_Lot)
# Write an RScript that creates a lot_summary dataframe using the group_by() and the summarize() functions to group each manufacturing lot by the mean, median, variance, and standard deviation of the suspension coil’s PSI column.
lot_summary <- group_by(suspension$Manufacturing_Lot)
# Write an RScript that creates a lot_summary dataframe using the group_by() and the summarize() functions to group each manufacturing lot by the mean, median, variance, and standard deviation of the suspension coil’s PSI column.
lot_summary <- suspension %>% group_by(suspension$Manufacturing_Lot)
# Write an RScript that creates a total_summary dataframe using the summarize() function to get the mean, median, variance, and standard deviation of the suspension coil’s PSI column
total_summary <- suspension %>% summarize(Mean = mean(PSI), Median = median(PSI), Variance = var(PSI), SD = sd(PSI))
# Write an RScript that creates a lot_summary dataframe using the group_by() and the summarize() functions to group each manufacturing lot by the mean, median, variance, and standard deviation of the suspension coil’s PSI column.
lot_summary <- suspension %>% group_by(Manufacturing_Lot)
# Write an RScript that creates a lot_summary dataframe using the group_by() and the summarize() functions to group each manufacturing lot by the mean, median, variance, and standard deviation of the suspension coil’s PSI column.
lot_summary <- suspension %>% group_by(Manufacturing_Lot) %>% summarize(Mean = mean(PSI), Median = median(PSI), Variance = var(PSI), SD = sd(PSI))
View(lot_summary)
total_summary
# Use the library() function to load the dplyr package.
library(dplyr)
# Import and read in the MechaCar_mpg.csv file as a dataframe.
car <- read.csv("MechaCar_mpg.csv")
# Perform linear regression using the lm() function.
model <- lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data = car)
# Write an RScript using the t.test() function to determine if the PSI across all manufacturing lots is statistically different from the population mean of 1,500 pounds per square inch.
t.test(suspension$PSI, mu = 1500)
?t.test
View(suspension)
t.test(suspension[Manufacturing_Lot==Lot1,PSI],mu = 1500)
suspension[Manufacturing_Lot==Lot1,PSI]
suspension[Manufacturing_Lot==Lot1,]
suspension[,Manufacturing_Lot==Lot1]
suspension[,Manufacturing_Lot]
suspension[Manufacturing_Lot]
suspension[1]
suspension[2]
suspension[2 == Lot1]
suspension[,2 == Lot1]
suspension[2 == Lot1,]
suspension[suspension$Manufacturing_Lot==Lot1]
suspension[suspension$Manufacturing_Lot=="Lot1"]
suspension[suspension$Manufacturing_Lot=="Lot1",]
suspension[suspension$Manufacturing_Lot=="Lot1",PSI]
suspension[suspension$Manufacturing_Lot=="Lot1",]PSI
suspension[suspension$Manufacturing_Lot=="Lot1",]$PSI
subset(suspension, Manufacturing_Lot == 'Lot1')
suspension[suspension$Manufacturing_Lot=="Lot1",]$PSI
t.test(suspension[suspension$Manufacturing_Lot==Lot1],mu = 1500)
t.test(suspension[suspension$Manufacturing_Lot=="Lot1",]$PSI,mu = 1500)
t.test(suspension[suspension$Manufacturing_Lot=="Lot1",]$PSI,mu = 1500)                                                                 t.test(suspension[suspension$Manufacturing_Lot=="Lot2",]$PSI,mu = 1500)
t.test(suspension[suspension$Manufacturing_Lot=="Lot3",]$PSI,mu = 1500)
t.test(suspension[suspension$Manufacturing_Lot=="Lot1",]$PSI,mu = 1500)                                                                 t.test(suspension[suspension$Manufacturing_Lot=="Lot2",]$PSI,mu = 1500)
t.test(suspension[suspension$Manufacturing_Lot=="Lot1",]$PSI, mu = 1500)                                                                t.test(suspension[suspension$Manufacturing_Lot=="Lot2",]$PSI, mu = 1500)
t.test(suspension[suspension$Manufacturing_Lot=="Lot1",]$PSI, mu = 1500)                                                                t.test(suspension[suspension$Manufacturing_Lot=="Lot2",]$PSI, mu = 1500)
t.test(suspension[suspension$Manufacturing_Lot=="Lot1",]$PSI, mu = 1500)                                                                t.test(suspension[suspension$Manufacturing_Lot=="Lot2",]$PSI, mu = 1500)
t.test(suspension[suspension$Manufacturing_Lot=="Lot1",]$PSI, mu = 1500)
t.test(suspension[suspension$Manufacturing_Lot=="Lot2",]$PSI, mu = 1500)
t.test(suspension[suspension$Manufacturing_Lot=="Lot3",]$PSI, mu = 1500)
# Write an RScript using the t.test() function to determine if the PSI across all manufacturing lots is statistically different from the population mean of 1,500 pounds per square inch.
t.test(suspension$PSI, mu = 1500)
t.test(suspension[suspension$Manufacturing_Lot=="Lot1",]$PSI, mu = 1500)
t.test(suspension[suspension$Manufacturing_Lot=="Lot2",]$PSI, mu = 1500)
t.test(suspension[suspension$Manufacturing_Lot=="Lot3",]$PSI, mu = 1500)
t.test(suspension[suspension$Manufacturing_Lot=="Lot3",]$PSI, mu = 1500)
t.test(suspension[suspension$Manufacturing_Lot=="Lot3",]$PSI, mu = 1500)
t.test(suspension[suspension$Manufacturing_Lot=="Lot2",]$PSI, mu = 1500)
# Write an RScript using the t.test() function to determine if the PSI across all manufacturing lots is statistically different from the population mean of 1,500 pounds per square inch.
t.test(suspension$PSI, mu = 1500)
t.test(suspension[suspension$Manufacturing_Lot=="Lot1",]$PSI, mu = 1500)
t.test(suspension[suspension$Manufacturing_Lot=="Lot2",]$PSI, mu = 1500)
t.test(suspension[suspension$Manufacturing_Lot=="Lot3",]$PSI, mu = 1500)
View(car)
